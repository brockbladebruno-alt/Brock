{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPeuXXw9YUXIiQSXdXCD39Q",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/brockbladebruno-alt/Brock/blob/main/Shooting%20Analysis%20Application\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import cv2\n",
        "import mediapipe as mp\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import streamlit as st\n",
        "import math\n",
        "import tempfile\n",
        "import os\n",
        "\n",
        "# ================================\n",
        "# üßÆ HELPER FUNCTIONS\n",
        "# ================================\n",
        "\n",
        "def calculate_angle(a, b, c):\n",
        "    \"\"\"Calculate angle (in degrees) at point b formed by points a-b-c\"\"\"\n",
        "    a, b, c = np.array(a), np.array(b), np.array(c)\n",
        "    ba = a - b\n",
        "    bc = c - b\n",
        "    cosine_angle = np.dot(ba, bc) / (np.linalg.norm(ba) * np.linalg.norm(bc) + 1e-8)\n",
        "    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))\n",
        "    return np.degrees(angle)\n",
        "\n",
        "\n",
        "def extract_joint_coordinates(frame, pose):\n",
        "    \"\"\"Extracts (x, y, z) coordinates of key joints\"\"\"\n",
        "    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n",
        "    results = pose.process(frame_rgb)\n",
        "    joints = {}\n",
        "    if results.pose_landmarks:\n",
        "        for idx, lm in enumerate(results.pose_landmarks.landmark):\n",
        "            joints[idx] = (lm.x, lm.y, lm.z)\n",
        "    return joints\n",
        "\n",
        "\n",
        "def analyze_angles(joint_data):\n",
        "    \"\"\"Calculate elbow and shoulder angles for each frame\"\"\"\n",
        "    angles_list = []\n",
        "    for joints in joint_data:\n",
        "        try:\n",
        "            left_elbow_angle = calculate_angle(joints[11][:2], joints[13][:2], joints[15][:2])\n",
        "            right_elbow_angle = calculate_angle(joints[12][:2], joints[14][:2], joints[16][:2])\n",
        "            left_shoulder_angle = calculate_angle(joints[13][:2], joints[11][:2], joints[23][:2])\n",
        "            right_shoulder_angle = calculate_angle(joints[14][:2], joints[12][:2], joints[24][:2])\n",
        "\n",
        "            angles_list.append({\n",
        "                \"left_elbow\": left_elbow_angle,\n",
        "                \"right_elbow\": right_elbow_angle,\n",
        "                \"left_shoulder\": left_shoulder_angle,\n",
        "                \"right_shoulder\": right_shoulder_angle\n",
        "            })\n",
        "        except:\n",
        "            angles_list.append({\n",
        "                \"left_elbow\": None,\n",
        "                \"right_elbow\": None,\n",
        "                \"left_shoulder\": None,\n",
        "                \"right_shoulder\": None\n",
        "            })\n",
        "    return pd.DataFrame(angles_list)\n",
        "\n",
        "\n",
        "def analyze_fatigue(angles_df):\n",
        "    \"\"\"Analyze fatigue based on drift, variability, and smoothness.\"\"\"\n",
        "    angles_df = angles_df.dropna().reset_index(drop=True)\n",
        "\n",
        "    # Drift over time (relative to first frame)\n",
        "    for col in [\"left_elbow\", \"right_elbow\", \"left_shoulder\", \"right_shoulder\"]:\n",
        "        angles_df[f\"{col}_drift\"] = angles_df[col] - angles_df[col].iloc[0]\n",
        "\n",
        "    # Smoothness = frame-to-frame change magnitude\n",
        "    for col in [\"left_elbow\", \"right_elbow\", \"left_shoulder\", \"right_shoulder\"]:\n",
        "        angles_df[f\"{col}_smoothness\"] = angles_df[col].diff().abs()\n",
        "\n",
        "    # Variability = rolling std deviation (window of 10 frames)\n",
        "    window = 10\n",
        "    for col in [\"left_elbow\", \"right_elbow\"]:\n",
        "        angles_df[f\"{col}_variability\"] = angles_df[col].rolling(window).std()\n",
        "\n",
        "    # Fatigue metrics\n",
        "    drift_score = (\n",
        "        abs(angles_df[\"left_elbow_drift\"].iloc[-1]) +\n",
        "        abs(angles_df[\"right_elbow_drift\"].iloc[-1])\n",
        "    ) / 2\n",
        "\n",
        "    variability_mean = (\n",
        "        angles_df[\"left_elbow_variability\"].mean() +\n",
        "        angles_df[\"right_elbow_variability\"].mean()\n",
        "    ) / 2\n",
        "\n",
        "    # Interpret fatigue level\n",
        "    if drift_score > 20 or variability_mean > 10:\n",
        "        fatigue_level = \"High\"\n",
        "    elif drift_score > 10 or variability_mean > 5:\n",
        "        fatigue_level = \"Moderate\"\n",
        "    else:\n",
        "        fatigue_level = \"Low\"\n",
        "\n",
        "    return angles_df, fatigue_level\n",
        "\n",
        "\n",
        "# ================================\n",
        "# üéØ STREAMLIT APP\n",
        "# ================================\n",
        "\n",
        "st.title(\"üèÄ Basketball Shooting Form & Fatigue Analyzer (with Skeleton Overlay)\")\n",
        "\n",
        "uploaded_video = st.file_uploader(\"Upload Basketball Shooting Video\", type=[\"mp4\", \"mov\", \"avi\"])\n",
        "\n",
        "if uploaded_video:\n",
        "    # Save video temporarily\n",
        "    tfile = tempfile.NamedTemporaryFile(delete=False)\n",
        "    tfile.write(uploaded_video.read())\n",
        "    video_path = tfile.name\n",
        "\n",
        "    # Initialize MediaPipe\n",
        "    mp_drawing = mp.solutions.drawing_utils\n",
        "    mp_pose = mp.solutions.pose\n",
        "    pose = mp_pose.Pose(static_image_mode=False, min_detection_confidence=0.5, min_tracking_confidence=0.5)\n",
        "\n",
        "    cap = cv2.VideoCapture(video_path)\n",
        "    frame_placeholder = st.empty()\n",
        "    progress_text = st.empty()\n",
        "    progress_bar = st.progress(0)\n",
        "\n",
        "    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n",
        "    joint_data = []\n",
        "    frame_count = 0\n",
        "\n",
        "    st.info(\"Processing video and detecting skeletons...\")\n",
        "\n",
        "    while cap.isOpened():\n",
        "        ret, frame = cap.read()\n",
        "        if not ret:\n",
        "            break\n",
        "\n",
        "        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n",
        "        results = pose.process(frame_rgb)\n",
        "\n",
        "        if results.pose_landmarks:\n",
        "            mp_drawing.draw_landmarks(\n",
        "                frame,\n",
        "                results.pose_landmarks,\n",
        "                mp_pose.POSE_CONNECTIONS,\n",
        "                mp_drawing.DrawingSpec(color=(0, 255, 0), thickness=2, circle_radius=2),\n",
        "                mp_drawing.DrawingSpec(color=(0, 0, 255), thickness=2, circle_radius=2)\n",
        "            )\n",
        "\n",
        "            # Save joint coordinates\n",
        "            joints = {idx: (lm.x, lm.y, lm.z) for idx, lm in enumerate(results.pose_landmarks.landmark)}\n",
        "            joint_data.append(joints)\n",
        "\n",
        "        frame_placeholder.image(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB), channels=\"RGB\", use_container_width=True)\n",
        "        frame_count += 1\n",
        "        progress_text.text(f\"Processing frame {frame_count}/{total_frames}\")\n",
        "        progress_bar.progress(min(frame_count / total_frames, 1.0))\n",
        "\n",
        "    cap.release()\n",
        "    os.remove(video_path)\n",
        "    st.success(\"‚úÖ Skeleton overlay complete!\")\n",
        "\n",
        "    # ================================\n",
        "    # üìä ANALYSIS\n",
        "    # ================================\n",
        "\n",
        "    st.info(\"Analyzing joint angles...\")\n",
        "    angles_df = analyze_angles(joint_data)\n",
        "    st.dataframe(angles_df.head())\n",
        "\n",
        "    st.info(\"Calculating fatigue metrics...\")\n",
        "    angles_df, fatigue_level = analyze_fatigue(angles_df)\n",
        "\n",
        "    # Drift chart\n",
        "    st.line_chart(angles_df[['left_elbow_drift', 'right_elbow_drift']])\n",
        "\n",
        "    # Variability chart\n",
        "    st.line_chart(angles_df[['left_elbow_variability', 'right_elbow_variability']])\n",
        "\n",
        "    # Smoothness chart\n",
        "    st.area_chart(angles_df[['left_elbow_smoothness', 'right_elbow_smoothness']])\n",
        "\n",
        "    # ================================\n",
        "    # üí¨ INTERPRETATION\n",
        "    # ================================\n",
        "    st.subheader(f\"üèãÔ∏è‚Äç‚ôÇÔ∏è Fatigue Level: {fatigue_level}\")\n",
        "    if fatigue_level == \"Low\":\n",
        "        st.success(\"Form looks stable ‚Äî low fatigue detected ‚úÖ\")\n",
        "    elif fatigue_level == \"Moderate\":\n",
        "        st.warning(\"Some drift or inconsistency detected ‚Äî possible mild fatigue ‚ö†Ô∏è\")\n",
        "    else:\n",
        "        st.error(\"Significant fatigue detected ‚Äî form breakdown likely ‚ùå\")\n",
        "\n",
        "    st.write(\"\"\"\n",
        "    ### üìà Interpretation Guide:\n",
        "    - **Low Fatigue:** Angles stay consistent with smooth motion.\n",
        "    - **Moderate Fatigue:** Elbow/shoulder drift or variability begins to appear.\n",
        "    - **High Fatigue:** Form breaks down ‚Äî shooting motion significantly changes.\n",
        "    \"\"\")\n",
        "\n",
        "else:\n",
        "    st.info(\"üëÜ Upload a basketball shooting video to begin analysis.\")\n"
      ],
      "metadata": {
        "id": "oKiAzo6IYrIa"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}